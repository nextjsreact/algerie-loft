#!/usr/bin/env tsx
/**
 * DIAGNOSE DATABASE ERROR
 * =======================
 * Diagnostiquer l'erreur "Database error granting user"
 */

import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import { resolve } from 'path'

async function diagnoseDatabaseError() {
  console.log('üîç DIAGNOSE DATABASE ERROR')
  console.log('='.repeat(60))

  try {
    // Configuration DEV
    config({ path: resolve(process.cwd(), '.env'), override: true })
    
    const devUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    const devServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
    const devAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    
    console.log('üìã CONFIGURATION:')
    console.log(`   URL: ${devUrl}`)
    console.log(`   Service Key: ${devServiceKey ? 'Pr√©sente' : 'Manquante'}`)
    console.log(`   Anon Key: ${devAnonKey ? 'Pr√©sente' : 'Manquante'}`)

    // Test 1: Connexion avec service role
    console.log('\nüîê TEST 1: CONNEXION AVEC SERVICE ROLE')
    const adminClient = createClient(devUrl, devServiceKey)
    
    try {
      const { data: users, error: usersError } = await adminClient.auth.admin.listUsers()
      
      if (usersError) {
        console.log(`‚ùå Erreur listUsers: ${usersError.message}`)
      } else {
        console.log(`‚úÖ Service role OK - ${users.users.length} utilisateurs`)
        
        // Chercher notre utilisateur
        const targetUser = users.users.find(u => u.email === 'admin@dev.local')
        if (targetUser) {
          console.log(`‚úÖ Utilisateur trouv√©: ${targetUser.email}`)
          console.log(`   ID: ${targetUser.id}`)
          console.log(`   Confirm√©: ${targetUser.email_confirmed_at ? 'Oui' : 'Non'}`)
          console.log(`   Derni√®re connexion: ${targetUser.last_sign_in_at || 'Jamais'}`)
          console.log(`   Statut: ${targetUser.banned_until ? 'Banni' : 'Actif'}`)
        } else {
          console.log('‚ùå Utilisateur admin@dev.local non trouv√©')
        }
      }
    } catch (error) {
      console.log(`‚ùå Exception service role: ${error}`)
    }

    // Test 2: V√©rifier la connectivit√© de base
    console.log('\nüîê TEST 2: CONNECTIVIT√â BASE DE DONN√âES')
    try {
      const { data, error } = await adminClient
        .from('profiles')
        .select('count')
        .limit(1)

      if (error) {
        console.log(`‚ùå Erreur DB: ${error.message}`)
        console.log(`   Code: ${error.code}`)
        console.log(`   Details: ${error.details}`)
      } else {
        console.log('‚úÖ Connectivit√© DB OK')
      }
    } catch (error) {
      console.log(`‚ùå Exception DB: ${error}`)
    }

    // Test 3: V√©rifier les permissions RLS
    console.log('\nüîê TEST 3: PERMISSIONS RLS')
    const userClient = createClient(devUrl, devAnonKey)
    
    try {
      const { data, error } = await userClient
        .from('profiles')
        .select('count')
        .limit(1)

      if (error) {
        console.log(`‚ö†Ô∏è RLS bloque l'acc√®s: ${error.message}`)
      } else {
        console.log('‚úÖ RLS permet l\'acc√®s anonyme')
      }
    } catch (error) {
      console.log(`‚ùå Exception RLS: ${error}`)
    }

    // Test 4: Essayer de recr√©er l'utilisateur
    console.log('\nüîê TEST 4: RECR√âATION UTILISATEUR')
    const testEmail = 'admin@dev.local'
    const testPassword = 'dev123'
    
    try {
      // Supprimer l'utilisateur existant
      const { data: users } = await adminClient.auth.admin.listUsers()
      const existingUser = users.users.find(u => u.email === testEmail)
      
      if (existingUser) {
        console.log('üóëÔ∏è Suppression utilisateur existant...')
        const { error: deleteError } = await adminClient.auth.admin.deleteUser(existingUser.id)
        
        if (deleteError) {
          console.log(`‚ùå Erreur suppression: ${deleteError.message}`)
        } else {
          console.log('‚úÖ Utilisateur supprim√©')
        }
      }

      // Attendre un peu
      await new Promise(resolve => setTimeout(resolve, 2000))

      // Cr√©er nouvel utilisateur
      console.log('üÜï Cr√©ation nouvel utilisateur...')
      const { data: newUser, error: createError } = await adminClient.auth.admin.createUser({
        email: testEmail,
        password: testPassword,
        email_confirm: true
      })

      if (createError) {
        console.log(`‚ùå Erreur cr√©ation: ${createError.message}`)
        console.log(`   Code: ${createError.code}`)
      } else {
        console.log('‚úÖ Utilisateur cr√©√© avec succ√®s')
        
        // Cr√©er profil
        const { error: profileError } = await adminClient
          .from('profiles')
          .upsert([{
            id: newUser.user.id,
            email: testEmail,
            full_name: 'Admin DEV',
            role: 'admin'
          }])

        if (profileError) {
          console.log(`‚ö†Ô∏è Erreur profil: ${profileError.message}`)
        } else {
          console.log('‚úÖ Profil cr√©√©')
        }

        // Test connexion imm√©diate
        console.log('üîê Test connexion imm√©diate...')
        
        // Attendre un peu pour que la DB se synchronise
        await new Promise(resolve => setTimeout(resolve, 3000))
        
        const { data: loginTest, error: loginError } = await userClient.auth.signInWithPassword({
          email: testEmail,
          password: testPassword
        })

        if (loginError) {
          console.log(`‚ùå Erreur connexion: ${loginError.message}`)
          console.log(`   Code: ${loginError.code}`)
          console.log(`   Status: ${loginError.status}`)
        } else {
          console.log('‚úÖ Connexion r√©ussie!')
          await userClient.auth.signOut()
        }
      }
    } catch (error) {
      console.log(`‚ùå Exception recr√©ation: ${error}`)
    }

    // Test 5: V√©rifier l'√©tat du projet Supabase
    console.log('\nüîê TEST 5: √âTAT DU PROJET SUPABASE')
    try {
      // Test simple de ping
      const response = await fetch(`${devUrl}/rest/v1/`, {
        headers: {
          'apikey': devAnonKey,
          'Authorization': `Bearer ${devAnonKey}`
        }
      })

      console.log(`üì° Status HTTP: ${response.status}`)
      
      if (response.status === 200) {
        console.log('‚úÖ Projet Supabase actif')
      } else {
        console.log('‚ö†Ô∏è Projet Supabase peut avoir des probl√®mes')
      }
    } catch (error) {
      console.log(`‚ùå Erreur ping Supabase: ${error}`)
    }

    console.log('\nüí° RECOMMANDATIONS:')
    console.log('='.repeat(40))
    console.log('1. V√©rifiez le dashboard Supabase pour des erreurs')
    console.log('2. Le projet peut √™tre en pause ou avoir des limites')
    console.log('3. Essayez de red√©marrer le projet Supabase')
    console.log('4. V√©rifiez les quotas et limites du plan')

  } catch (error) {
    console.error('üí• ERREUR FATALE:', error)
  }
}

diagnoseDatabaseError().catch(console.error)