#!/usr/bin/env tsx
/**
 * TEST DU CLONAGE INTELLIGENT FINAL - VERSION AUTOMATIQUE
 * =======================================================
 */

import { SmartCloneFinal } from './smart-clone-final'

// Cr√©er une version de test qui ne demande pas de confirmation
class TestSmartCloneFinal extends SmartCloneFinal {
  // Override la m√©thode de confirmation pour les tests
  private async confirmCloning(): Promise<boolean> {
    console.log('üß™ MODE TEST - Confirmation automatique')
    return true
  }

  // M√©thode de test qui clone seulement quelques tables
  public async testClone(): Promise<void> {
    try {
      console.log('üß™ TEST DU CLONAGE INTELLIGENT FINAL')
      console.log('='.repeat(50))

      // Tester seulement les tables probl√©matiques
      const testTables = ['currencies', 'categories']
      
      let totalRecords = 0
      const startTime = Date.now()

      for (const tableName of testTables) {
        const result = await this.cloneTableSmart(tableName)
        totalRecords += result.records
      }

      // R√©sum√© du test
      const duration = Date.now() - startTime
      console.log('\nüìä R√âSUM√â DU TEST')
      console.log('='.repeat(30))
      console.log(`‚è±Ô∏è Dur√©e: ${Math.round(duration / 1000)}s`)
      console.log(`üìà Enregistrements: ${totalRecords}`)
      console.log('‚úÖ Test termin√©!')

    } catch (error) {
      console.error('üí• ERREUR TEST:', error)
      process.exit(1)
    }
  }

  // Exposer la m√©thode priv√©e pour les tests
  public async cloneTableSmart(tableName: string) {
    return super['cloneTableSmart'](tableName)
  }
}

// Ex√©cution du test
async function main() {
  const tester = new TestSmartCloneFinal()
  await tester.testClone()
}

main().catch(console.error)