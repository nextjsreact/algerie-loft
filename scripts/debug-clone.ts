#!/usr/bin/env tsx
/**
 * DEBUG CLONE - COPIE TABLE PAR TABLE AVEC LOGS D√âTAILL√âS
 * =======================================================
 */

import fetch from 'node-fetch'
import { config } from 'dotenv'

async function debugClone() {
  try {
    console.log('üöÄ DEBUG CLONE - TABLE PAR TABLE')

    // Configuration
    config({ path: 'env-backup/.env.development' })
    const devUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const devKey = process.env.SUPABASE_SERVICE_ROLE_KEY

    config({ path: 'env-backup/.env.prod' })
    const prodUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const prodKey = process.env.SUPABASE_SERVICE_ROLE_KEY

    if (!devUrl || !devKey || !prodUrl || !prodKey) {
      throw new Error('Configuration manquante')
    }

    console.log('‚úÖ Configuration charg√©e')

    // √âtape 1: Vider les tables en DEV
    console.log('\nüìã √âTAPE 1: NETTOYAGE DEV')
    const tablesToClear = ['lofts', 'loft_owners', 'profiles', 'currencies', 'categories']

    for (const table of tablesToClear) {
      try {
        console.log(`üóëÔ∏è Suppression ${table}...`)
        const response = await fetch(`${devUrl}/rest/v1/${table}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${devKey}`,
            'apikey': devKey,
            'Content-Type': 'application/json'
          }
        })
        console.log(`‚úÖ ${table}: HTTP ${response.status}`)
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erreur suppression ${table}:`, error)
      }
    }

    // √âtape 2: Copier les donn√©es de r√©f√©rence
    console.log('\nüìã √âTAPE 2: DONN√âES DE R√âF√âRENCE')

    // Currencies
    console.log('üí∞ Copie des currencies...')
    const currenciesResponse = await fetch(`${prodUrl}/rest/v1/currencies?select=*`, {
      headers: {
        'Authorization': `Bearer ${prodKey}`,
        'apikey': prodKey,
        'Content-Type': 'application/json'
      }
    })

    if (currenciesResponse.ok) {
      const currencies = await currenciesResponse.json() as any[]
      console.log(`‚úÖ ${currencies.length} currencies trouv√©es`)

      if (currencies.length > 0) {
        const insertResponse = await fetch(`${devUrl}/rest/v1/currencies`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${devKey}`,
            'apikey': devKey,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(currencies)
        })
        console.log(`‚úÖ Currencies: HTTP ${insertResponse.status}`)
      }
    }

    // Categories
    console.log('üìÇ Copie des categories...')
    const categoriesResponse = await fetch(`${prodUrl}/rest/v1/categories?select=*`, {
      headers: {
        'Authorization': `Bearer ${prodKey}`,
        'apikey': prodKey,
        'Content-Type': 'application/json'
      }
    })

    if (categoriesResponse.ok) {
      const categories = await categoriesResponse.json() as any[]
      console.log(`‚úÖ ${categories.length} categories trouv√©es`)

      if (categories.length > 0) {
        const insertResponse = await fetch(`${devUrl}/rest/v1/categories`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${devKey}`,
            'apikey': devKey,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(categories)
        })
        console.log(`‚úÖ Categories: HTTP ${insertResponse.status}`)
      }
    }

    // √âtape 3: Copier les propri√©taires
    console.log('\nüìã √âTAPE 3: PROPRI√âTAIRES')

    const ownersResponse = await fetch(`${prodUrl}/rest/v1/loft_owners?select=*`, {
      headers: {
        'Authorization': `Bearer ${prodKey}`,
        'apikey': prodKey,
        'Content-Type': 'application/json'
      }
    })

    if (ownersResponse.ok) {
      const owners = await ownersResponse.json() as any[]
      console.log(`‚úÖ ${owners.length} propri√©taires trouv√©s`)

      if (owners.length > 0) {
        // Nettoyer les donn√©es
        const cleanedOwners = owners.map((owner, index) => ({
          ...owner,
          name: owner.name || `Propri√©taire ${index + 1}`,
          email: owner.email || `owner${index + 1}@localhost`
        }))

        const insertResponse = await fetch(`${devUrl}/rest/v1/loft_owners`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${devKey}`,
            'apikey': devKey,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(cleanedOwners)
        })
        console.log(`‚úÖ Propri√©taires: HTTP ${insertResponse.status}`)
      }
    }

    // √âtape 4: Copier les lofts
    console.log('\nüìã √âTAPE 4: LOFTS')

    const loftsResponse = await fetch(`${prodUrl}/rest/v1/lofts?select=*`, {
      headers: {
        'Authorization': `Bearer ${prodKey}`,
        'apikey': prodKey,
        'Content-Type': 'application/json'
      }
    })

    if (loftsResponse.ok) {
      const lofts = await loftsResponse.json() as any[]
      console.log(`‚úÖ ${lofts.length} lofts trouv√©s`)

      if (lofts.length > 0) {
        // Nettoyer les donn√©es
        const cleanedLofts = lofts.map((loft, index) => ({
          ...loft,
          name: loft.name || `Loft ${index + 1}`,
          address: loft.address || `Adresse ${index + 1}`,
          price_per_month: loft.price_per_month || 50000,
          status: loft.status || 'available',
          company_percentage: loft.company_percentage || 50,
          owner_percentage: loft.owner_percentage || 50
        }))

        const insertResponse = await fetch(`${devUrl}/rest/v1/lofts`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${devKey}`,
            'apikey': devKey,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(cleanedLofts)
        })
        console.log(`‚úÖ Lofts: HTTP ${insertResponse.status}`)

        if (!insertResponse.ok) {
          const errorText = await insertResponse.text()
          console.error(`‚ùå Erreur d√©taill√©e: ${errorText}`)
        }
      }
    }

    // V√©rification finale
    console.log('\nüìã V√âRIFICATION FINALE')

    const finalCheck = await fetch(`${devUrl}/rest/v1/lofts?select=count`, {
      headers: {
        'Authorization': `Bearer ${devKey}`,
        'apikey': devKey,
        'Content-Type': 'application/json'
      }
    })

    if (finalCheck.ok) {
      const count = await finalCheck.json()
      console.log(`‚úÖ Lofts en DEV: ${count}`)
    }

    console.log('üéâ DEBUG CLONE TERMIN√â')

  } catch (error) {
    console.error('üí• ERREUR:', error)
  }
}

debugClone()