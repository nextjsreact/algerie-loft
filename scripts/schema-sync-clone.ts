/**
 * SYNCHRONISATION DE SCH√âMA + CLONAGE
 * ===================================
 *
 * Script qui synchronise d'abord les sch√©mas puis clone les donn√©es
 */

import fetch from 'node-fetch'
import { config } from 'dotenv'

async function schemaSyncClone() {
  try {
    console.log('üîÑ SYNCHRONISATION SCH√âMA + CLONAGE')

    // Configuration
    const prodConfig = config({ path: 'env-backup/.env.prod' })
    const devConfig = config({ path: 'env-backup/.env.development' })

    const prodUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const prodKey = process.env.SUPABASE_SERVICE_ROLE_KEY

    config({ path: 'env-backup/.env.development', override: true })
    const devUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const devKey = process.env.SUPABASE_SERVICE_ROLE_KEY

    if (!prodUrl || !prodKey || !devUrl || !devKey) {
      throw new Error('Configuration manquante')
    }

    console.log('‚úÖ Configuration charg√©e')

    // Tables essentielles √† cloner
    const essentialTables = [
      'currencies', 'categories', 'zone_areas', 'internet_connection_types',
      'payment_methods', 'loft_owners', 'profiles', 'lofts'
    ]

    let totalRecords = 0
    let successCount = 0
    let errorCount = 0

    // √âtape 1: V√©rifier l'√©tat actuel de DEV
    console.log('\nüìã √âTAPE 1: √âTAT ACTUEL DE DEV')
    console.log('='.repeat(60))

    for (const tableName of essentialTables) {
      try {
        const response = await fetch(`${devUrl}/rest/v1/${tableName}?select=count`, {
          headers: {
            'Authorization': `Bearer ${devKey}`,
            'apikey': devKey,
            'Content-Type': 'application/json'
          }
        })

        if (response.ok) {
          const count = await response.json() as number
          console.log(`üìä ${tableName}: ${count} enregistrements`)
        } else {
          console.log(`üìä ${tableName}: table absente`)
        }
      } catch (error) {
        console.log(`üìä ${tableName}: table absente`)
      }
    }

    // √âtape 2: Suppression compl√®te des donn√©es en DEV (avec v√©rification)
    console.log('\nüìã √âTAPE 2: SUPPRESSION DES DONN√âES DEV')
    console.log('='.repeat(60))

    for (const tableName of essentialTables) {
      try {
        // D'abord v√©rifier si la table existe et a des donn√©es
        const checkResponse = await fetch(`${devUrl}/rest/v1/${tableName}?select=count`, {
          headers: {
            'Authorization': `Bearer ${devKey}`,
            'apikey': devKey,
            'Content-Type': 'application/json'
          }
        })

        if (checkResponse.ok) {
          const count = await checkResponse.json() as number
          if (count > 0) {
            console.log(`üóëÔ∏è ${tableName}: suppression de ${count} enregistrements...`)

            const deleteResponse = await fetch(`${devUrl}/rest/v1/${tableName}`, {
              method: 'DELETE',
              headers: {
                'Authorization': `Bearer ${devKey}`,
                'apikey': devKey,
                'Content-Type': 'application/json'
              }
            })

            if (deleteResponse.ok) {
              console.log(`‚úÖ ${tableName}: supprim√©`)
            } else {
              console.warn(`‚ö†Ô∏è ${tableName}: HTTP ${deleteResponse.status}`)
            }
          } else {
            console.log(`‚ÑπÔ∏è ${tableName}: d√©j√† vide`)
          }
        } else {
          console.log(`‚ÑπÔ∏è ${tableName}: table absente`)
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è ${tableName}: erreur suppression`)
      }
    }

    // √âtape 3: Clonage des donn√©es de r√©f√©rence d'abord
    console.log('\nüìã √âTAPE 3: CLONAGE DES DONN√âES DE R√âF√âRENCE')
    console.log('='.repeat(60))

    const referenceTables = ['currencies', 'categories', 'zone_areas', 'internet_connection_types', 'payment_methods']

    for (const tableName of referenceTables) {
      try {
        console.log(`üì• ${tableName}...`)

        const response = await fetch(`${prodUrl}/rest/v1/${tableName}?select=*`, {
          headers: {
            'Authorization': `Bearer ${prodKey}`,
            'apikey': prodKey,
            'Content-Type': 'application/json'
          }
        })

        if (!response.ok) {
          console.warn(`‚ö†Ô∏è Impossible de r√©cup√©rer ${tableName}: HTTP ${response.status}`)
          errorCount++
          continue
        }

        const data = await response.json() as any[]

        if (data.length === 0) {
          console.log(`‚ÑπÔ∏è ${tableName}: aucune donn√©e`)
          continue
        }

        console.log(`‚úÖ ${tableName}: ${data.length} enregistrements`)

        // Nettoyer les donn√©es selon les besoins du sch√©ma DEV
        const cleanedData = data.map((record, index) => {
          const cleaned = { ...record }

          // Adapter aux sch√©mas DEV
          if (tableName === 'currencies') {
            // DEV n'a pas decimal_digits et updated_at
            delete cleaned.decimal_digits
            delete cleaned.updated_at
          } else if (tableName === 'categories') {
            // DEV n'a pas updated_at
            delete cleaned.updated_at
          } else if (tableName === 'zone_areas') {
            // DEV n'a pas updated_at mais a description
            delete cleaned.updated_at
            if (!cleaned.description) cleaned.description = `Zone ${index + 1}`
          } else if (tableName === 'internet_connection_types') {
            // PROD n'a pas name et description, mais DEV les a
            if (!cleaned.name) cleaned.name = `Type ${index + 1}`
            if (!cleaned.description) cleaned.description = `Type de connexion ${index + 1}`
          } else if (tableName === 'payment_methods') {
            // DEV n'a pas updated_at
            delete cleaned.updated_at
          }

          return cleaned
        })

        const insertResponse = await fetch(`${devUrl}/rest/v1/${tableName}`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${devKey}`,
            'apikey': devKey,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(cleanedData)
        })

        if (insertResponse.ok) {
          console.log(`‚úÖ ${tableName}: ${cleanedData.length} enregistrements copi√©s`)
          totalRecords += cleanedData.length
          successCount++
        } else {
          const errorText = await insertResponse.text()
          console.warn(`‚ö†Ô∏è ${tableName}: HTTP ${insertResponse.status} - ${errorText}`)
          errorCount++
        }

      } catch (error) {
        console.error(`‚ùå ${tableName}: erreur - ${error}`)
        errorCount++
      }
    }

    // √âtape 4: Clonage des propri√©taires
    console.log('\nüìã √âTAPE 4: CLONAGE DES PROPRI√âTAIRES')
    console.log('='.repeat(60))

    try {
      const response = await fetch(`${prodUrl}/rest/v1/loft_owners?select=*`, {
        headers: {
          'Authorization': `Bearer ${prodKey}`,
          'apikey': prodKey,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const owners = await response.json() as any[]
        console.log(`‚úÖ loft_owners: ${owners.length} propri√©taires trouv√©s`)

        if (owners.length > 0) {
          const cleanedOwners = owners.map((owner, index) => ({
            ...owner,
            name: owner.name || `Propri√©taire ${index + 1}`,
            email: owner.email || `owner${index + 1}@localhost`
          }))

          const insertResponse = await fetch(`${devUrl}/rest/v1/loft_owners`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${devKey}`,
              'apikey': devKey,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(cleanedOwners)
          })

          if (insertResponse.ok) {
            console.log('‚úÖ loft_owners: copi√©s avec succ√®s')
            totalRecords += cleanedOwners.length
            successCount++
          } else {
            const errorText = await insertResponse.text()
            console.warn(`‚ö†Ô∏è loft_owners: HTTP ${insertResponse.status} - ${errorText}`)
            errorCount++
          }
        }
      }
    } catch (error) {
      console.error('‚ùå loft_owners: erreur -', error)
      errorCount++
    }

    // √âtape 5: Clonage des profils
    console.log('\nüìã √âTAPE 5: CLONAGE DES PROFILS')
    console.log('='.repeat(60))

    try {
      const response = await fetch(`${prodUrl}/rest/v1/profiles?select=*`, {
        headers: {
          'Authorization': `Bearer ${prodKey}`,
          'apikey': prodKey,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const profiles = await response.json() as any[]
        console.log(`‚úÖ profiles: ${profiles.length} profils trouv√©s`)

        if (profiles.length > 0) {
          const cleanedProfiles = profiles.map((profile, index) => {
            const cleaned = { ...profile }

            // Adapter au sch√©ma DEV (supprimer les colonnes manquantes)
            delete cleaned.password_hash
            delete cleaned.email_verified
            delete cleaned.reset_token
            delete cleaned.reset_token_expires
            delete cleaned.last_login

            // S'assurer que les champs requis existent
            if (!cleaned.email) cleaned.email = `user${index + 1}@localhost`
            if (!cleaned.full_name) cleaned.full_name = `Utilisateur ${index + 1}`

            return cleaned
          })

          const insertResponse = await fetch(`${devUrl}/rest/v1/profiles`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${devKey}`,
              'apikey': devKey,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(cleanedProfiles)
          })

          if (insertResponse.ok) {
            console.log('‚úÖ profiles: copi√©s avec succ√®s')
            totalRecords += cleanedProfiles.length
            successCount++
          } else {
            const errorText = await insertResponse.text()
            console.warn(`‚ö†Ô∏è profiles: HTTP ${insertResponse.status} - ${errorText}`)
            errorCount++
          }
        }
      }
    } catch (error) {
      console.error('‚ùå profiles: erreur -', error)
      errorCount++
    }

    // √âtape 6: Clonage des LOFTS (les plus importants)
    console.log('\nüìã √âTAPE 6: CLONAGE DES LOFTS')
    console.log('='.repeat(60))

    try {
      const response = await fetch(`${prodUrl}/rest/v1/lofts?select=*`, {
        headers: {
          'Authorization': `Bearer ${prodKey}`,
          'apikey': prodKey,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const lofts = await response.json() as any[]
        console.log(`‚úÖ lofts: ${lofts.length} lofts trouv√©s`)

        if (lofts.length > 0) {
          const cleanedLofts = lofts.map((loft, index) => {
            const cleaned = { ...loft }

            // Adapter au sch√©ma DEV (ajouter la colonne manquante dans PROD)
            if (!cleaned.price_per_month) cleaned.price_per_month = 50000

            // S'assurer que les champs requis existent
            if (!cleaned.name) cleaned.name = `Loft ${index + 1}`
            if (!cleaned.address) cleaned.address = `Adresse ${index + 1}`
            if (!cleaned.status) cleaned.status = 'available'
            if (!cleaned.company_percentage) cleaned.company_percentage = 50
            if (!cleaned.owner_percentage) cleaned.owner_percentage = 50

            return cleaned
          })

          console.log('üìù Insertion des lofts...')

          const insertResponse = await fetch(`${devUrl}/rest/v1/lofts`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${devKey}`,
              'apikey': devKey,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(cleanedLofts)
          })

          if (insertResponse.ok) {
            console.log('‚úÖ lofts: TOUS COPI√âS AVEC SUCC√àS!')
            totalRecords += cleanedLofts.length
            successCount++
          } else {
            const errorText = await insertResponse.text()
            console.error(`‚ùå lofts: HTTP ${insertResponse.status} - ${errorText}`)

            // Insertion individuelle si √©chec en lot
            console.log('üîÑ Tentative d\'insertion individuelle...')
            let successCount = 0

            for (let i = 0; i < cleanedLofts.length; i++) {
              try {
                const singleResponse = await fetch(`${devUrl}/rest/v1/lofts`, {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${devKey}`,
                    'apikey': devKey,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(cleanedLofts[i])
                })

                if (singleResponse.ok) {
                  successCount++
                  console.log(`‚úÖ Loft ${i + 1}/${lofts.length}: ${cleanedLofts[i].name}`)
                } else {
                  console.warn(`‚ö†Ô∏è Loft ${i + 1}/${lofts.length}: HTTP ${singleResponse.status}`)
                }
              } catch (error) {
                console.warn(`‚ö†Ô∏è Loft ${i + 1}/${lofts.length}: erreur`)
              }
            }

            console.log(`‚úÖ Insertion individuelle: ${successCount}/${lofts.length} lofts copi√©s`)
            totalRecords += successCount
            if (successCount > 0) successCount++
          }
        }
      }
    } catch (error) {
      console.error('‚ùå lofts: erreur -', error)
      errorCount++
    }

    // √âtape 7: V√©rification finale
    console.log('\nüìã √âTAPE 7: V√âRIFICATION FINALE')
    console.log('='.repeat(60))

    console.log(`üìä Total enregistrements copi√©s: ${totalRecords}`)
    console.log(`‚úÖ Tables r√©ussies: ${successCount}`)
    console.log(`‚ùå Tables √©chou√©es: ${errorCount}`)

    // V√©rifier les tables principales
    const finalTables = ['currencies', 'categories', 'loft_owners', 'profiles', 'lofts']

    for (const tableName of finalTables) {
      try {
        const response = await fetch(`${devUrl}/rest/v1/${tableName}?select=count`, {
          headers: {
            'Authorization': `Bearer ${devKey}`,
            'apikey': devKey,
            'Content-Type': 'application/json'
          }
        })

        if (response.ok) {
          const count = await response.json() as number
          console.log(`‚úÖ ${tableName}: ${count} enregistrements`)
        } else {
          console.log(`‚ùå ${tableName}: erreur v√©rification`)
        }
      } catch (error) {
        console.log(`‚ùå ${tableName}: erreur v√©rification`)
      }
    }

    console.log('\nüéâ CLONAGE AVEC SYNCHRO SCH√âMA TERMIN√â!')
  } catch (error) {
    console.error('üí• ERREUR FATALE:', error)
  }
}

schemaSyncClone()