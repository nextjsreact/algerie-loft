#!/usr/bin/env tsx
/**
 * TEST DIRECT DU CLONAGE - SANS ANALYSE DE SCH√âMA
 * ===============================================
 */

import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import { resolve } from 'path'

async function testDirectClone() {
  console.log('üß™ TEST DIRECT DU CLONAGE')
  console.log('='.repeat(50))

  try {
    // Configuration Production
    config({ path: resolve(process.cwd(), '.env.prod'), override: true })
    const prodUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    const prodKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
    const prodClient = createClient(prodUrl, prodKey)

    // Configuration D√©veloppement
    config({ path: resolve(process.cwd(), '.env.development'), override: true })
    const devUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    const devKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
    const devClient = createClient(devUrl, devKey)

    console.log('‚úÖ Clients initialis√©s')

    // Test sur plusieurs tables
    const tablesToTest = ['currencies', 'categories', 'lofts']
    
    for (const tableName of tablesToTest) {
      console.log(`\nüìã Test: ${tableName}`)
      console.log('-'.repeat(30))

      try {
        // 1. R√©cup√©rer les donn√©es de PROD
        console.log('üì• R√©cup√©ration PROD...')
        const { data: prodData, error: prodError } = await prodClient
          .from(tableName)
          .select('*')
          .limit(1) // Juste un √©chantillon

        if (prodError) {
          console.error(`‚ùå PROD: ${prodError.message}`)
          continue
        }

        console.log(`‚úÖ PROD: ${prodData?.length || 0} enregistrements`)
        
        if (prodData && prodData.length > 0) {
          const prodColumns = Object.keys(prodData[0])
          console.log(`üìä Colonnes PROD: ${prodColumns.join(', ')}`)

          // 2. Tester l'insertion dans DEV
          console.log('üì§ Test insertion DEV...')
          
          // D'abord, essayer d'ins√©rer tel quel
          const { error: insertError } = await devClient
            .from(tableName)
            .insert([prodData[0]])

          if (insertError) {
            console.warn(`‚ö†Ô∏è Insertion directe √©chou√©e: ${insertError.message}`)
            
            // Essayer de deviner quelles colonnes poser probl√®me
            if (insertError.message.includes('updated_at')) {
              console.log('üîÑ Tentative sans updated_at...')
              const { updated_at, ...recordWithoutUpdatedAt } = prodData[0]
              
              const { error: retryError } = await devClient
                .from(tableName)
                .insert([recordWithoutUpdatedAt])

              if (retryError) {
                console.error(`‚ùå Retry √©chou√©e: ${retryError.message}`)
              } else {
                console.log('‚úÖ Insertion r√©ussie sans updated_at!')
              }
            }
          } else {
            console.log('‚úÖ Insertion directe r√©ussie!')
          }
        }

      } catch (error) {
        console.error(`‚ùå Erreur ${tableName}:`, error)
      }
    }

    console.log('\nüéâ TEST DIRECT TERMIN√â')

  } catch (error) {
    console.error('‚ùå ERREUR TEST:', error)
    process.exit(1)
  }
}

testDirectClone().catch(console.error)