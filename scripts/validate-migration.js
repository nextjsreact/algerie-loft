#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

console.log('üîç Validation de la migration i18next vers next-intl...');

// 1. V√©rifier qu'il n'y a plus de r√©f√©rences √† react-i18next
console.log('\n1. V√©rification des r√©f√©rences react-i18next...');
try {
  const result = execSync('powershell "Get-ChildItem -Path components,app -Include *.tsx -Recurse | Select-String \\"react-i18next\\""', { encoding: 'utf8' });
  if (result.trim()) {
    console.log('‚ùå Des r√©f√©rences √† react-i18next ont √©t√© trouv√©es:');
    console.log(result);
  } else {
    console.log('‚úÖ Aucune r√©f√©rence √† react-i18next trouv√©e');
  }
} catch (error) {
  console.log('‚úÖ Aucune r√©f√©rence √† react-i18next trouv√©e');
}

// 2. V√©rifier que tous les composants utilisent useTranslations
console.log('\n2. V√©rification de l\'utilisation de useTranslations...');
try {
  const result = execSync('powershell "(Get-ChildItem -Path components,app -Include *.tsx -Recurse | Select-String \\"useTranslations\\").Count"', { encoding: 'utf8' });
  const count = parseInt(result.trim()) || 0;
  console.log(`‚úÖ ${count} utilisations de useTranslations trouv√©es`);
} catch (error) {
  console.log('‚ö†Ô∏è  Impossible de compter les utilisations de useTranslations');
}

// 3. V√©rifier que les fichiers de messages existent
console.log('\n3. V√©rification des fichiers de messages...');
const locales = ['fr', 'en', 'ar'];
locales.forEach(locale => {
  const messagePath = `messages/${locale}.json`;
  if (fs.existsSync(messagePath)) {
    console.log(`‚úÖ Fichier de messages ${locale} trouv√©`);
    try {
      const content = JSON.parse(fs.readFileSync(messagePath, 'utf8'));
      const keyCount = countKeys(content);
      console.log(`   üìä ${keyCount} cl√©s de traduction dans ${locale}`);
    } catch (error) {
      console.log(`‚ùå Erreur lors de la lecture du fichier ${locale}: ${error.message}`);
    }
  } else {
    console.log(`‚ùå Fichier de messages ${locale} manquant`);
  }
});

// 4. V√©rifier la configuration next-intl
console.log('\n4. V√©rification de la configuration next-intl...');
if (fs.existsSync('i18n.ts')) {
  console.log('‚úÖ Fichier de configuration i18n.ts trouv√©');
} else {
  console.log('‚ùå Fichier de configuration i18n.ts manquant');
}

if (fs.existsSync('middleware.ts')) {
  console.log('‚úÖ Middleware de routage trouv√©');
} else {
  console.log('‚ùå Middleware de routage manquant');
}

// 5. V√©rifier que les d√©pendances i18next ont √©t√© supprim√©es
console.log('\n5. V√©rification de la suppression des anciennes d√©pendances...');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const oldDeps = ['i18next', 'react-i18next', 'i18next-browser-languagedetector', 'i18next-resources-to-backend'];
  const foundDeps = oldDeps.filter(dep => 
    packageJson.dependencies?.[dep] || packageJson.devDependencies?.[dep]
  );
  
  if (foundDeps.length > 0) {
    console.log(`‚ùå Anciennes d√©pendances encore pr√©sentes: ${foundDeps.join(', ')}`);
  } else {
    console.log('‚úÖ Toutes les anciennes d√©pendances ont √©t√© supprim√©es');
  }
} catch (error) {
  console.log('‚ö†Ô∏è  Impossible de v√©rifier les d√©pendances');
}

// 6. V√©rifier la structure des routes localis√©es
console.log('\n6. V√©rification des routes localis√©es...');
const appDir = 'app';
if (fs.existsSync(path.join(appDir, '[locale]'))) {
  console.log('‚úÖ Structure de routes localis√©es trouv√©e');
  
  // V√©rifier quelques routes importantes
  const importantRoutes = ['dashboard', 'login', 'lofts'];
  importantRoutes.forEach(route => {
    if (fs.existsSync(path.join(appDir, '[locale]', route))) {
      console.log(`   ‚úÖ Route /${route} localis√©e`);
    } else {
      console.log(`   ‚ö†Ô∏è  Route /${route} non localis√©e`);
    }
  });
} else {
  console.log('‚ùå Structure de routes localis√©es manquante');
}

console.log('\nüéâ Validation termin√©e!');

function countKeys(obj, prefix = '') {
  let count = 0;
  for (const key in obj) {
    if (typeof obj[key] === 'object' && obj[key] !== null) {
      count += countKeys(obj[key], prefix + key + '.');
    } else {
      count++;
    }
  }
  return count;
}