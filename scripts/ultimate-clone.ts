#!/usr/bin/env tsx
/**
 * CLONAGE ULTIME - SOLUTION QUI MARCHE VRAIMENT
 * =============================================
 *
 * Probl√®me identifi√©: Les scripts pr√©c√©dents ne marchent pas
 * Solution: Script minimaliste qui copie juste les lofts
 */

import fetch from 'node-fetch'
import { config } from 'dotenv'

async function ultimateClone() {
  try {
    console.log('üöÄ CLONAGE ULTIME - COPIE DIRECTE')

    // Configuration
    config({ path: 'env-backup/.env.development' })
    const devUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const devKey = process.env.SUPABASE_SERVICE_ROLE_KEY

    config({ path: 'env-backup/.env.prod' })
    const prodUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const prodKey = process.env.SUPABASE_SERVICE_ROLE_KEY

    if (!devUrl || !devKey || !prodUrl || !prodKey) {
      throw new Error('Configuration manquante')
    }

    console.log('‚úÖ Configuration charg√©e')

    // √âtape 1: V√©rifier l'√©tat actuel
    console.log('\nüìã √âTAT ACTUEL:')
    const currentState = await fetch(`${devUrl}/rest/v1/lofts?select=count`, {
      headers: {
        'Authorization': `Bearer ${devKey}`,
        'apikey': devKey,
        'Content-Type': 'application/json'
      }
    })
    const currentCount = await currentState.json()
    console.log(`DEV a actuellement: ${currentCount} lofts`)

    // √âtape 2: R√©cup√©rer les lofts de production
    console.log('\nüì• R√âCUP√âRATION DES LOFTS DE PRODUCTION...')
    const prodResponse = await fetch(`${prodUrl}/rest/v1/lofts?select=*`, {
      headers: {
        'Authorization': `Bearer ${prodKey}`,
        'apikey': prodKey,
        'Content-Type': 'application/json'
      }
    })

    if (!prodResponse.ok) {
      throw new Error(`Impossible de r√©cup√©rer les lofts de production: HTTP ${prodResponse.status}`)
    }

    const prodLofts = await prodResponse.json() as any[]
    console.log(`‚úÖ ${prodLofts.length} lofts trouv√©s en production`)

    if (prodLofts.length === 0) {
      console.log('‚ÑπÔ∏è Aucun loft en production')
      return
    }

    // √âtape 3: Vider compl√®tement la table lofts en DEV
    console.log('\nüóëÔ∏è SUPPRESSION COMPL√àTE DES LOFTS EN DEV...')

    // Utiliser TRUNCATE pour vider la table compl√®tement
    try {
      const truncateResponse = await fetch(`${devUrl}/rest/v1/rpc/truncate_lofts`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${devKey}`,
          'apikey': devKey,
          'Content-Type': 'application/json'
        }
      })

      if (truncateResponse.ok) {
        console.log('‚úÖ Table lofts vid√©e avec TRUNCATE')
      } else {
        console.warn(`‚ö†Ô∏è TRUNCATE √©chou√©: HTTP ${truncateResponse.status}`)
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è TRUNCATE non disponible, utilisation DELETE...')
    }

    // √âtape 4: Ins√©rer les lofts un par un
    console.log('\nüìù INSERTION DES LOFTS UN PAR UN...')

    let successCount = 0
    let errorCount = 0

    for (let i = 0; i < prodLofts.length; i++) {
      const loft = prodLofts[i]

      // Nettoyer les donn√©es
      const cleanedLoft = {
        ...loft,
        name: loft.name || `Loft ${i + 1}`,
        address: loft.address || `Adresse ${i + 1}`,
        price_per_month: loft.price_per_month || 50000,
        status: loft.status || 'available',
        company_percentage: loft.company_percentage || 50,
        owner_percentage: loft.owner_percentage || 50
      }

      try {
        const insertResponse = await fetch(`${devUrl}/rest/v1/lofts`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${devKey}`,
            'apikey': devKey,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(cleanedLoft)
        })

        if (insertResponse.ok) {
          successCount++
          console.log(`‚úÖ Loft ${i + 1}/${prodLofts.length}: ${cleanedLoft.name}`)
        } else {
          const errorText = await insertResponse.text()
          console.error(`‚ùå Loft ${i + 1}/${prodLofts.length}: HTTP ${insertResponse.status} - ${errorText}`)
          errorCount++
        }
      } catch (error) {
        console.error(`‚ùå Loft ${i + 1}/${prodLofts.length}: Erreur - ${error}`)
        errorCount++
      }
    }

    // √âtape 5: V√©rification finale
    console.log('\nüìã V√âRIFICATION FINALE:')
    console.log(`‚úÖ Lofts copi√©s avec succ√®s: ${successCount}`)
    console.log(`‚ùå Lofts en erreur: ${errorCount}`)

    const finalCheck = await fetch(`${devUrl}/rest/v1/lofts?select=count`, {
      headers: {
        'Authorization': `Bearer ${devKey}`,
        'apikey': devKey,
        'Content-Type': 'application/json'
      }
    })

    if (finalCheck.ok) {
      const finalCount = await finalCheck.json()
      console.log(`üìä Total lofts en DEV: ${finalCount}`)
    }

    // Afficher les premiers lofts copi√©s
    if (successCount > 0) {
      const sampleResponse = await fetch(`${devUrl}/rest/v1/lofts?select=id,name,price_per_month&limit=3`, {
        headers: {
          'Authorization': `Bearer ${devKey}`,
          'apikey': devKey,
          'Content-Type': 'application/json'
        }
      })

      if (sampleResponse.ok) {
        const sampleLofts = await sampleResponse.json() as any[]
        console.log('\nüìã EXEMPLE DE LOFTS COPI√âS:')
        sampleLofts.forEach((loft, index) => {
          console.log(`${index + 1}. ${loft.name} - ${loft.price_per_month} DA/mois`)
        })
      }
    }

    console.log('\nüéâ CLONAGE ULTIME TERMIN√â!')
    console.log(`üìà R√©sultat: ${successCount}/${prodLofts.length} lofts copi√©s`)

    if (successCount === prodLofts.length) {
      console.log('‚úÖ CLONAGE R√âUSSI √Ä 100%!')
    } else if (successCount > 0) {
      console.log('‚ö†Ô∏è CLONAGE PARTIEL - Certains lofts n\'ont pas pu √™tre copi√©s')
    } else {
      console.log('‚ùå CLONAGE √âCHOU√â - Aucun loft copi√©')
    }

  } catch (error) {
    console.error('üí• ERREUR FATALE:', error)
  }
}

ultimateClone()