#!/usr/bin/env tsx
/**
 * CLONAGE COMPLET PRODUCTION ‚Üí D√âVELOPPEMENT
 * ==========================================
 * 
 * Ce script fait un clonage complet :
 * 1. DROP tous les objets de la base DEV
 * 2. RECR√âE le sch√©ma complet depuis PROD
 * 3. COPIE toutes les donn√©es
 * 
 * ATTENTION: Destruction compl√®te de la base DEV !
 */

import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import { resolve } from 'path'
import * as readline from 'readline'

interface DatabaseObject {
  name: string
  type: 'table' | 'view' | 'function' | 'trigger' | 'policy'
  schema: string
}

class CompleteCloner {
  private prodClient: any
  private devClient: any
  private prodUrl: string
  private devUrl: string
  private prodKey: string
  private devKey: string

  constructor() {
    this.initializeClients()
  }

  /**
   * Initialisation des clients
   */
  private initializeClients() {
    console.log('üîß Initialisation des connexions...')

    // Configuration Production
    config({ path: resolve(process.cwd(), '.env.prod'), override: true })
    this.prodUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    this.prodKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
    
    if (!this.prodUrl || !this.prodKey) {
      throw new Error('‚ùå Configuration PRODUCTION manquante')
    }

    this.prodClient = createClient(this.prodUrl, this.prodKey)
    console.log('‚úÖ Client PRODUCTION initialis√©')

    // Configuration D√©veloppement
    config({ path: resolve(process.cwd(), '.env.development'), override: true })
    this.devUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    this.devKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
    
    if (!this.devUrl || !this.devKey) {
      throw new Error('‚ùå Configuration D√âVELOPPEMENT manquante')
    }

    // PROTECTION CRITIQUE
    if (this.devUrl.includes('mhngbluefyucoesgcjoy')) {
      throw new Error('üö´ ERREUR CRITIQUE: URL de PRODUCTION d√©tect√©e dans DEV!')
    }

    this.devClient = createClient(this.devUrl, this.devKey)
    console.log('‚úÖ Client D√âVELOPPEMENT initialis√©')
  }

  /**
   * Confirmation utilisateur avec avertissement s√©v√®re
   */
  private async confirmDestruction(): Promise<boolean> {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    })

    return new Promise((resolve) => {
      console.log('\nüö® AVERTISSEMENT CRITIQUE üö®')
      console.log('='.repeat(50))
      console.log('Cette op√©ration va D√âTRUIRE COMPL√àTEMENT la base DEV :')
      console.log('‚Ä¢ TOUTES les tables seront supprim√©es')
      console.log('‚Ä¢ TOUTES les vues seront supprim√©es')
      console.log('‚Ä¢ TOUTES les fonctions seront supprim√©es')
      console.log('‚Ä¢ TOUS les triggers seront supprim√©s')
      console.log('‚Ä¢ TOUTES les politiques RLS seront supprim√©es')
      console.log('‚Ä¢ Le sch√©ma sera recr√©√© depuis PROD')
      console.log('‚Ä¢ Les donn√©es seront copi√©es depuis PROD')
      console.log('')
      console.log('‚ö†Ô∏è  CETTE ACTION EST IRR√âVERSIBLE ‚ö†Ô∏è')
      console.log('')

      rl.question('Pour confirmer, tapez exactement "DETRUIRE ET RECREER": ', (answer) => {
        rl.close()
        resolve(answer === 'DETRUIRE ET RECREER')
      })
    })
  }

  /**
   * Ex√©cution de SQL brut via RPC
   */
  private async executeSQL(client: any, sql: string, description: string): Promise<void> {
    try {
      console.log(`üîß ${description}...`)
      
      const { data, error } = await client.rpc('execute_sql', { sql })
      
      if (error) {
        throw new Error(`Erreur SQL: ${error.message}`)
      }
      
      console.log(`‚úÖ ${description} termin√©`)
    } catch (error) {
      console.error(`‚ùå Erreur ${description}:`, error)
      throw error
    }
  }

  /**
   * R√©cup√©ration de la liste des objets de base de donn√©es
   */
  private async getDatabaseObjects(client: any): Promise<DatabaseObject[]> {
    const objects: DatabaseObject[] = []

    try {
      // Tables
      const { data: tables } = await client
        .from('information_schema.tables')
        .select('table_name, table_schema')
        .eq('table_schema', 'public')

      if (tables) {
        tables.forEach((table: any) => {
          objects.push({
            name: table.table_name,
            type: 'table',
            schema: table.table_schema
          })
        })
      }

      // Vues
      const { data: views } = await client
        .from('information_schema.views')
        .select('table_name, table_schema')
        .eq('table_schema', 'public')

      if (views) {
        views.forEach((view: any) => {
          objects.push({
            name: view.table_name,
            type: 'view',
            schema: view.table_schema
          })
        })
      }

      console.log(`üìã ${objects.length} objets trouv√©s`)
      return objects

    } catch (error) {
      console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer la liste des objets:', error)
      return []
    }
  }

  /**
   * Suppression compl√®te de tous les objets DEV
   */
  private async dropAllDevObjects(): Promise<void> {
    console.log('\nüóëÔ∏è SUPPRESSION COMPL√àTE DE LA BASE DEV')
    console.log('='.repeat(50))

    try {
      // D√©sactiver les contraintes FK temporairement
      await this.executeSQL(
        this.devClient,
        'SET session_replication_role = replica;',
        'D√©sactivation des contraintes FK'
      )

      // R√©cup√©rer tous les objets
      const objects = await this.getDatabaseObjects(this.devClient)

      // Supprimer toutes les tables
      const tables = objects.filter(obj => obj.type === 'table')
      if (tables.length > 0) {
        console.log(`üóëÔ∏è Suppression de ${tables.length} tables...`)
        
        for (const table of tables) {
          try {
            await this.executeSQL(
              this.devClient,
              `DROP TABLE IF EXISTS "${table.name}" CASCADE;`,
              `Suppression table ${table.name}`
            )
          } catch (error) {
            console.warn(`‚ö†Ô∏è Impossible de supprimer ${table.name}:`, error)
          }
        }
      }

      // Supprimer toutes les vues
      const views = objects.filter(obj => obj.type === 'view')
      if (views.length > 0) {
        console.log(`üóëÔ∏è Suppression de ${views.length} vues...`)
        
        for (const view of views) {
          try {
            await this.executeSQL(
              this.devClient,
              `DROP VIEW IF EXISTS "${view.name}" CASCADE;`,
              `Suppression vue ${view.name}`
            )
          } catch (error) {
            console.warn(`‚ö†Ô∏è Impossible de supprimer la vue ${view.name}:`, error)
          }
        }
      }

      // Supprimer toutes les fonctions personnalis√©es
      await this.executeSQL(
        this.devClient,
        `
        DO $$ 
        DECLARE 
          func_name text;
        BEGIN 
          FOR func_name IN 
            SELECT proname FROM pg_proc 
            WHERE pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
            AND proname NOT LIKE 'pg_%'
          LOOP 
            EXECUTE 'DROP FUNCTION IF EXISTS ' || func_name || ' CASCADE';
          END LOOP; 
        END $$;
        `,
        'Suppression des fonctions personnalis√©es'
      )

      // R√©activer les contraintes
      await this.executeSQL(
        this.devClient,
        'SET session_replication_role = DEFAULT;',
        'R√©activation des contraintes FK'
      )

      console.log('‚úÖ Base DEV compl√®tement nettoy√©e')

    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression:', error)
      throw error
    }
  }

  /**
   * R√©cup√©ration du sch√©ma complet de PROD
   */
  private async getProductionSchema(): Promise<string> {
    console.log('\nüìã R√âCUP√âRATION DU SCH√âMA PRODUCTION')
    console.log('='.repeat(50))

    try {
      // Utiliser pg_dump via l'API Supabase pour r√©cup√©rer le sch√©ma
      const { data, error } = await this.prodClient.rpc('get_schema_dump')
      
      if (error) {
        throw new Error(`Impossible de r√©cup√©rer le sch√©ma: ${error.message}`)
      }

      console.log('‚úÖ Sch√©ma PRODUCTION r√©cup√©r√©')
      return data

    } catch (error) {
      console.warn('‚ö†Ô∏è M√©thode RPC √©chou√©e, utilisation de la m√©thode alternative...')
      
      // M√©thode alternative : reconstruire le sch√©ma manuellement
      return await this.buildSchemaManually()
    }
  }

  /**
   * Construction manuelle du sch√©ma
   */
  private async buildSchemaManually(): Promise<string> {
    let schema = ''

    try {
      // R√©cup√©rer les tables et leurs colonnes
      const { data: tables } = await this.prodClient
        .from('information_schema.tables')
        .select('table_name')
        .eq('table_schema', 'public')
        .order('table_name')

      if (!tables) {
        throw new Error('Impossible de r√©cup√©rer les tables')
      }

      console.log(`üìã Construction du sch√©ma pour ${tables.length} tables...`)

      for (const table of tables) {
        const tableName = table.table_name

        // R√©cup√©rer les colonnes
        const { data: columns } = await this.prodClient
          .from('information_schema.columns')
          .select('column_name, data_type, is_nullable, column_default, character_maximum_length')
          .eq('table_schema', 'public')
          .eq('table_name', tableName)
          .order('ordinal_position')

        if (columns && columns.length > 0) {
          schema += `\n-- Table: ${tableName}\n`
          schema += `CREATE TABLE "${tableName}" (\n`

          const columnDefs = columns.map((col: any) => {
            let def = `  "${col.column_name}" ${col.data_type}`
            
            if (col.character_maximum_length) {
              def += `(${col.character_maximum_length})`
            }
            
            if (col.is_nullable === 'NO') {
              def += ' NOT NULL'
            }
            
            if (col.column_default) {
              def += ` DEFAULT ${col.column_default}`
            }
            
            return def
          })

          schema += columnDefs.join(',\n')
          schema += '\n);\n'
        }
      }

      console.log('‚úÖ Sch√©ma construit manuellement')
      return schema

    } catch (error) {
      console.error('‚ùå Erreur construction manuelle du sch√©ma:', error)
      throw error
    }
  }

  /**
   * Application du sch√©ma sur DEV
   */
  private async applySchemaTodev(schema: string): Promise<void> {
    console.log('\nüèóÔ∏è APPLICATION DU SCH√âMA SUR DEV')
    console.log('='.repeat(50))

    try {
      // Diviser le sch√©ma en commandes individuelles
      const commands = schema
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'))

      console.log(`üìã Application de ${commands.length} commandes SQL...`)

      for (let i = 0; i < commands.length; i++) {
        const command = commands[i]
        
        try {
          await this.executeSQL(
            this.devClient,
            command + ';',
            `Commande ${i + 1}/${commands.length}`
          )
        } catch (error) {
          console.warn(`‚ö†Ô∏è Commande ${i + 1} √©chou√©e:`, error)
          // Continuer avec les autres commandes
        }
      }

      console.log('‚úÖ Sch√©ma appliqu√© sur DEV')

    } catch (error) {
      console.error('‚ùå Erreur application du sch√©ma:', error)
      throw error
    }
  }

  /**
   * Copie de toutes les donn√©es
   */
  private async copyAllData(): Promise<void> {
    console.log('\nüìä COPIE DES DONN√âES PROD ‚Üí DEV')
    console.log('='.repeat(50))

    // Tables dans l'ordre des d√©pendances
    const tablesToCopy = [
      'currencies',
      'categories',
      'zone_areas', 
      'internet_connection_types',
      'payment_methods',
      'loft_owners',
      'teams',
      'profiles',
      'lofts',
      'team_members',
      'tasks',
      'transactions',
      'transaction_category_references',
      'settings',
      'notifications',
      'customers',
      'loft_photos'
    ]

    let totalRecords = 0

    for (const tableName of tablesToCopy) {
      try {
        console.log(`\nüìã Copie: ${tableName}`)
        console.log('-'.repeat(30))

        // R√©cup√©rer les donn√©es de PROD
        const { data: prodData, error: prodError } = await this.prodClient
          .from(tableName)
          .select('*')

        if (prodError) {
          console.warn(`‚ö†Ô∏è Erreur r√©cup√©ration ${tableName}: ${prodError.message}`)
          continue
        }

        if (!prodData || prodData.length === 0) {
          console.log(`‚ÑπÔ∏è Table ${tableName} vide`)
          continue
        }

        console.log(`üì• ${prodData.length} enregistrements r√©cup√©r√©s`)

        // Anonymiser les donn√©es sensibles
        const anonymizedData = this.anonymizeData(prodData, tableName)

        // Ins√©rer par lots dans DEV
        const batchSize = 50
        let insertedCount = 0

        for (let i = 0; i < anonymizedData.length; i += batchSize) {
          const batch = anonymizedData.slice(i, i + batchSize)
          
          const { error: insertError } = await this.devClient
            .from(tableName)
            .insert(batch)

          if (insertError) {
            console.warn(`‚ö†Ô∏è Erreur lot ${Math.floor(i/batchSize) + 1}: ${insertError.message}`)
            
            // Essayer un par un
            for (const record of batch) {
              const { error: singleError } = await this.devClient
                .from(tableName)
                .insert([record])
              
              if (!singleError) {
                insertedCount++
              }
            }
          } else {
            insertedCount += batch.length
          }
        }

        console.log(`‚úÖ ${tableName}: ${insertedCount} enregistrements copi√©s`)
        totalRecords += insertedCount

      } catch (error) {
        console.error(`‚ùå Erreur copie ${tableName}:`, error)
      }
    }

    console.log(`\nüéâ COPIE TERMIN√âE: ${totalRecords} enregistrements au total`)
  }

  /**
   * Anonymisation des donn√©es sensibles
   */
  private anonymizeData(data: any[], tableName: string): any[] {
    if (tableName === 'profiles') {
      return data.map((record, index) => ({
        ...record,
        email: record.role === 'admin' 
          ? 'admin_dev@dev.local' 
          : `user_dev_${index}@dev.local`,
        full_name: record.full_name 
          ? `${record.full_name} (DEV)` 
          : `User DEV ${index}`,
        airbnb_access_token: null,
        airbnb_refresh_token: null
      }))
    }

    if (tableName === 'notifications') {
      return data.map(record => ({
        ...record,
        message: record.message?.includes('@') 
          ? 'Message de test anonymis√©' 
          : record.message,
        is_read: true,
        read_at: new Date().toISOString()
      }))
    }

    return data
  }

  /**
   * Validation finale
   */
  private async validateClone(): Promise<void> {
    console.log('\nüîç VALIDATION DU CLONAGE')
    console.log('='.repeat(50))

    try {
      // V√©rifier quelques tables critiques
      const criticalTables = ['lofts', 'profiles', 'teams', 'categories']
      
      for (const table of criticalTables) {
        const { data, error } = await this.devClient
          .from(table)
          .select('count')

        if (error) {
          console.warn(`‚ö†Ô∏è ${table}: ${error.message}`)
        } else {
          console.log(`‚úÖ ${table}: accessible`)
        }
      }

      console.log('‚úÖ Validation termin√©e')

    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur validation:', error)
    }
  }

  /**
   * M√©thode principale de clonage complet
   */
  public async completeClone(): Promise<void> {
    const startTime = Date.now()

    try {
      console.log('üöÄ CLONAGE COMPLET PRODUCTION ‚Üí D√âVELOPPEMENT')
      console.log('='.repeat(60))

      // 1. Confirmation utilisateur
      const confirmed = await this.confirmDestruction()
      if (!confirmed) {
        console.log('‚ùå Clonage annul√© par l\'utilisateur')
        return
      }

      // 2. Suppression compl√®te de DEV
      await this.dropAllDevObjects()

      // 3. R√©cup√©ration du sch√©ma PROD
      const schema = await this.getProductionSchema()

      // 4. Application du sch√©ma sur DEV
      await this.applySchemaTodev(schema)

      // 5. Copie de toutes les donn√©es
      await this.copyAllData()

      // 6. Validation finale
      await this.validateClone()

      // R√©sum√© final
      const duration = Math.round((Date.now() - startTime) / 1000)
      
      console.log('\nüéâ CLONAGE COMPLET TERMIN√â!')
      console.log('='.repeat(60))
      console.log(`‚è±Ô∏è Dur√©e totale: ${duration}s`)
      console.log('‚úÖ Base DEV compl√®tement recr√©√©e depuis PROD')
      console.log('üîí Donn√©es sensibles anonymis√©es')
      console.log('')
      console.log('üí° PROCHAINES √âTAPES:')
      console.log('‚Ä¢ Testez votre application: npm run dev')
      console.log('‚Ä¢ Mot de passe universel DEV: dev123')

    } catch (error) {
      console.error('üí• ERREUR FATALE:', error)
      process.exit(1)
    }
  }
}

// Ex√©cution du script
async function main() {
  const cloner = new CompleteCloner()
  await cloner.completeClone()
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error)
}

export { CompleteCloner }