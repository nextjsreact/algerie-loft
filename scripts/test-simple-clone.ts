#!/usr/bin/env tsx
/**
 * TEST DU CLONAGE SIMPLIFI√â - VERSION AUTOMATIQUE
 * ===============================================
 * 
 * Version de test qui ne demande pas de confirmation
 */

import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import { resolve } from 'path'

async function testSimpleClone() {
  console.log('üß™ TEST DU CLONAGE SIMPLIFI√â')
  console.log('='.repeat(50))

  try {
    // Configuration Production
    config({ path: resolve(process.cwd(), '.env.prod'), override: true })
    const prodUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    const prodKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
    const prodClient = createClient(prodUrl, prodKey)

    // Configuration D√©veloppement
    config({ path: resolve(process.cwd(), '.env.development'), override: true })
    const devUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
    const devKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
    const devClient = createClient(devUrl, devKey)

    console.log('‚úÖ Clients initialis√©s')

    // Test sur une seule table : categories
    const tableName = 'categories'
    
    console.log(`\nüìã Test clonage: ${tableName}`)
    console.log('-'.repeat(30))

    // 1. R√©cup√©rer les donn√©es de PROD
    console.log('üì• R√©cup√©ration donn√©es PROD...')
    const { data: prodData, error: prodError } = await prodClient
      .from(tableName)
      .select('*')

    if (prodError) {
      throw new Error(`Erreur PROD: ${prodError.message}`)
    }

    console.log(`‚úÖ PROD: ${prodData?.length || 0} enregistrements`)

    // 2. V√©rifier l'√©tat actuel de DEV
    console.log('üìä √âtat actuel DEV...')
    const { data: devDataBefore, error: devError } = await devClient
      .from(tableName)
      .select('*')

    if (devError) {
      console.warn(`‚ö†Ô∏è DEV: ${devError.message}`)
    } else {
      console.log(`üìä DEV avant: ${devDataBefore?.length || 0} enregistrements`)
    }

    // 3. Nettoyer DEV
    console.log('üóëÔ∏è Nettoyage DEV...')
    const { error: deleteError } = await devClient
      .from(tableName)
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000')

    if (deleteError && !deleteError.message.includes('No rows found')) {
      console.warn(`‚ö†Ô∏è Nettoyage: ${deleteError.message}`)
    } else {
      console.log('‚úÖ DEV nettoy√©')
    }

    // 4. Copier les donn√©es si il y en a
    if (prodData && prodData.length > 0) {
      console.log('üì§ Copie des donn√©es...')
      
      const { error: insertError } = await devClient
        .from(tableName)
        .insert(prodData)

      if (insertError) {
        console.error(`‚ùå Erreur insertion: ${insertError.message}`)
      } else {
        console.log(`‚úÖ ${prodData.length} enregistrements copi√©s`)
      }
    } else {
      console.log('‚ÑπÔ∏è Aucune donn√©e √† copier')
    }

    // 5. V√©rifier le r√©sultat
    console.log('üîç V√©rification finale...')
    const { data: devDataAfter, error: verifyError } = await devClient
      .from(tableName)
      .select('*')

    if (verifyError) {
      console.error(`‚ùå Erreur v√©rification: ${verifyError.message}`)
    } else {
      console.log(`‚úÖ DEV apr√®s: ${devDataAfter?.length || 0} enregistrements`)
    }

    console.log('\nüéâ TEST TERMIN√â')
    console.log('='.repeat(50))
    console.log('‚úÖ Le clonage simplifi√© fonctionne!')

  } catch (error) {
    console.error('‚ùå ERREUR TEST:', error)
    process.exit(1)
  }
}

testSimpleClone().catch(console.error)