'use client'

import { useState } from 'react'
import Image from 'next/image'
import Link from 'next/link'
import { useLocale, useTranslations } from 'next-intl'
import { Property, Locale } from '@/types/sanity'
import { urlFor } from '@/lib/sanity-utils'
import { Card } from './card'
import { Button } from './button'

interface PropertyCardProps {
  property: Property
  className?: string
}

export function PropertyCard({ property, className = '' }: PropertyCardProps) {
  const locale = useLocale() as Locale
  const t = useTranslations('portfolio')
  const [imageError, setImageError] = useState(false)

  const title = property.title?.[locale] || property.title?.fr || 'Property'
  const description = property.description?.[locale] || property.description?.fr || ''
  const features = property.features?.[locale] || property.features?.fr || []
  
  const mainImage = property.images?.[0]
  const imageUrl = mainImage && !imageError 
    ? urlFor(mainImage).width(400).height(300).quality(80).url()
    : '/images/property-placeholder.svg'

  const specs = property.specifications
  const location = property.location

  return (
    <Card className={`group overflow-hidden hover:shadow-lg transition-shadow duration-300 touch-manipulation ${className}`}>
      <div className="relative aspect-[4/3] overflow-hidden">
        <Image
          src={imageUrl}
          alt={mainImage?.alt?.[locale] || title}
          fill
          className="object-cover group-hover:scale-105 transition-transform duration-300"
          onError={() => setImageError(true)}
          sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw"
          priority={false}
        />
        
        {/* Property Type Badge */}
        <div className="absolute top-2 left-2 sm:top-3 sm:left-3">
          <span className="bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full text-xs font-medium text-gray-700 capitalize">
            {t(`types.${property.type}`)}
          </span>
        </div>

        {/* Status Badge */}
        {property.status === 'featured' && (
          <div className="absolute top-2 right-2 sm:top-3 sm:right-3">
            <span className="bg-blue-600 text-white px-2 py-1 rounded-full text-xs font-medium">
              {t('featured')}
            </span>
          </div>
        )}
      </div>

      <div className="p-3 sm:p-4">
        <div className="mb-2">
          <h3 className="text-base sm:text-lg font-semibold text-gray-900 group-hover:text-blue-600 transition-colors line-clamp-2 leading-tight">
            {title}
          </h3>
          
          {location?.city && (
            <p className="text-xs sm:text-sm text-gray-500 flex items-center mt-1">
              <svg className="w-3 h-3 sm:w-4 sm:h-4 mr-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              {location.city}
            </p>
          )}
        </div>

        {description && (
          <p className="text-xs sm:text-sm text-gray-600 mb-3 line-clamp-2 leading-relaxed">
            {description}
          </p>
        )}

        {/* Specifications */}
        {specs && (
          <div className="flex items-center gap-2 sm:gap-4 text-xs text-gray-500 mb-3 flex-wrap">
            {specs.bedrooms && (
              <span className="flex items-center whitespace-nowrap">
                <svg className="w-3 h-3 sm:w-4 sm:h-4 mr-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 21v-4a2 2 0 012-2h4a2 2 0 012 2v4" />
                </svg>
                <span className="text-xs">{specs.bedrooms} {t('specs.bedrooms')}</span>
              </span>
            )}
            {specs.bathrooms && (
              <span className="flex items-center whitespace-nowrap">
                <svg className="w-3 h-3 sm:w-4 sm:h-4 mr-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z" />
                </svg>
                <span className="text-xs">{specs.bathrooms} {t('specs.bathrooms')}</span>
              </span>
            )}
            {specs.area && (
              <span className="flex items-center whitespace-nowrap">
                <svg className="w-3 h-3 sm:w-4 sm:h-4 mr-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4" />
                </svg>
                <span className="text-xs">{specs.area}mÂ²</span>
              </span>
            )}
          </div>
        )}

        {/* Features */}
        {features.length > 0 && (
          <div className="mb-3 sm:mb-4">
            <div className="flex flex-wrap gap-1">
              {features.slice(0, 2).map((feature, index) => (
                <span
                  key={index}
                  className="bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs leading-tight"
                >
                  {feature}
                </span>
              ))}
              {features.length > 2 && (
                <span className="text-xs text-gray-500 px-1 py-1">
                  +{features.length - 2} {t('moreFeatures')}
                </span>
              )}
            </div>
          </div>
        )}

        <div className="flex items-center justify-between gap-2">
          <Link href={`/${locale}/portfolio/${property.slug.current}`} className="flex-1 sm:flex-none">
            <Button 
              variant="outline" 
              size="sm" 
              className="text-xs sm:text-sm w-full sm:w-auto min-h-[36px] sm:min-h-[40px]"
              touchFriendly
            >
              {t('viewDetails')}
            </Button>
          </Link>
          
          {property.testimonial?.content?.[locale] && (
            <div className="flex items-center text-yellow-500 flex-shrink-0">
              {[...Array(5)].map((_, i) => (
                <svg key={i} className="w-3 h-3 sm:w-4 sm:h-4 fill-current" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              ))}
            </div>
          )}
        </div>
      </div>
    </Card>
  )
}