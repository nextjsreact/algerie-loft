name: 🚀 Public Website Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'public-website/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'public-website/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  WORKING_DIRECTORY: './public-website'

jobs:
  # ===============================
  # 🧪 Tests & Quality Checks
  # ===============================
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'
          
      - name: 📥 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
        
      - name: 🔍 Lint code
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint
        
      - name: 🧪 Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test -- --run --coverage
        
      - name: 🎭 Run E2E tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:e2e
        
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.WORKING_DIRECTORY }}/coverage/lcov.info
          fail_ci_if_error: false

  # ===============================
  # 🏗️ Build Application
  # ===============================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'
          
      - name: 📥 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
        
      - name: 🏗️ Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_URL || secrets.STAGING_URL }}
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          
      - name: 🔍 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '${{ env.WORKING_DIRECTORY }}/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: ${{ env.WORKING_DIRECTORY }}/.next/
          retention-days: 1

  # ===============================
  # 🔒 Security & Performance Audit
  # ===============================
  audit:
    name: 🔒 Security & Performance
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'
          
      - name: 📥 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
        
      - name: 🔍 Security audit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm audit --audit-level=high
        
      - name: 🔒 Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ env.WORKING_DIRECTORY }}/package.json

  # ===============================
  # 🚀 Deploy to Staging
  # ===============================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, audit]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ${{ env.WORKING_DIRECTORY }}/.next/
          
      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_PUBLIC }}
          working-directory: ${{ env.WORKING_DIRECTORY }}
          vercel-args: '--env NODE_ENV=staging'
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: 📝 Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Staging deployment ready!**\n\n📱 Preview: ${{ secrets.STAGING_URL }}\n\n✅ All checks passed!'
            })

  # ===============================
  # 🚀 Deploy to Production
  # ===============================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, audit]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ${{ env.WORKING_DIRECTORY }}/.next/
          
      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_PUBLIC }}
          working-directory: ${{ env.WORKING_DIRECTORY }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: 📧 Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🚀 Public website deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===============================
  # 🏥 Post-Deployment Health Check
  # ===============================
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📥 Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
        
      - name: 🏥 Run health checks
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run health:check
        env:
          HEALTH_CHECK_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_URL || secrets.STAGING_URL }}
          
      - name: 🔍 Run post-deployment tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:post-deployment
        env:
          TEST_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_URL || secrets.STAGING_URL }}