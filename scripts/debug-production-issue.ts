import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Charger les variables d'environnement
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

console.log('üîç Diagnostic des probl√®mes de production...\n')

async function debugProductionIssue() {
  try {
    // 1. V√©rifier la connexion Supabase
    console.log('1Ô∏è‚É£ Test de connexion Supabase...')
    const supabase = createClient(supabaseUrl, supabaseAnonKey)
    
    // Test simple de connexion
    const { data, error } = await supabase.from('lofts').select('count').limit(1)
    if (error) {
      console.error('‚ùå Erreur connexion Supabase:', error.message)
      return
    }
    console.log('‚úÖ Connexion Supabase OK')

    // 2. V√©rifier si le loft existe
    console.log('\n2Ô∏è‚É£ Test du loft sp√©cifique...')
    const loftId = 'b305b744-5ae6-40ed-bf91-00a848a4b1bc'
    const { data: loft, error: loftError } = await supabase
      .from('lofts')
      .select('*')
      .eq('id', loftId)
      .single()

    if (loftError) {
      console.error('‚ùå Erreur r√©cup√©ration loft:', loftError.message)
      return
    }
    
    if (!loft) {
      console.error('‚ùå Loft non trouv√© avec ID:', loftId)
      return
    }
    
    console.log('‚úÖ Loft trouv√©:', loft.name)

    // 3. V√©rifier les d√©pendances (owners, zones, etc.)
    console.log('\n3Ô∏è‚É£ Test des d√©pendances...')
    
    const { data: owners, error: ownersError } = await supabase
      .from('loft_owners')
      .select('*')
    
    if (ownersError) {
      console.error('‚ùå Erreur r√©cup√©ration propri√©taires:', ownersError.message)
    } else {
      console.log('‚úÖ Propri√©taires OK:', owners?.length || 0)
    }

    const { data: zones, error: zonesError } = await supabase
      .from('zone_areas')
      .select('*')
    
    if (zonesError) {
      console.error('‚ùå Erreur r√©cup√©ration zones:', zonesError.message)
    } else {
      console.log('‚úÖ Zones OK:', zones?.length || 0)
    }

    const { data: internet, error: internetError } = await supabase
      .from('internet_connection_types')
      .select('*')
    
    if (internetError) {
      console.error('‚ùå Erreur r√©cup√©ration connexions internet:', internetError.message)
    } else {
      console.log('‚úÖ Connexions internet OK:', internet?.length || 0)
    }

    // 4. Test de mise √† jour
    console.log('\n4Ô∏è‚É£ Test de mise √† jour (simulation)...')
    const { error: updateError } = await supabase
      .from('lofts')
      .update({ updated_at: new Date().toISOString() })
      .eq('id', loftId)
    
    if (updateError) {
      console.error('‚ùå Erreur simulation mise √† jour:', updateError.message)
    } else {
      console.log('‚úÖ Simulation mise √† jour OK')
    }

    console.log('\nüéâ Diagnostic termin√© avec succ√®s!')

  } catch (error) {
    console.error('üí• Erreur g√©n√©rale:', error)
  }
}

debugProductionIssue()