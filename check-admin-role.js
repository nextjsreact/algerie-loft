import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes')
  console.log('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl)
  console.log('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey)
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkAndFixAdminRole() {
  try {
    console.log('üîç V√©rification des utilisateurs et leurs r√¥les...\n')
    
    // R√©cup√©rer tous les utilisateurs
    const { data: users, error } = await supabase
      .from('profiles')
      .select('id, email, full_name, role')
      .order('created_at', { ascending: true })

    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', error)
      return
    }

    if (!users || users.length === 0) {
      console.log('‚ùå Aucun utilisateur trouv√© dans la base de donn√©es')
      return
    }

    console.log('üë• Utilisateurs trouv√©s:')
    users.forEach((user, index) => {
      console.log(`${index + 1}. ${user.email} - ${user.full_name || 'Nom non d√©fini'} - R√¥le: ${user.role || 'non d√©fini'}`)
    })

    // V√©rifier s'il y a d√©j√† un admin
    const adminUsers = users.filter(user => user.role === 'admin')
    
    if (adminUsers.length > 0) {
      console.log('\n‚úÖ Administrateur(s) trouv√©(s):')
      adminUsers.forEach(admin => {
        console.log(`   - ${admin.email} (${admin.full_name || 'Nom non d√©fini'})`)
      })
    } else {
      console.log('\n‚ö†Ô∏è  Aucun administrateur trouv√©!')
      
      // Proposer de faire du premier utilisateur un admin
      const firstUser = users[0]
      console.log(`\nüîß Promotion du premier utilisateur en admin: ${firstUser.email}`)
      
      const { error: updateError } = await supabase
        .from('profiles')
        .update({ role: 'admin' })
        .eq('id', firstUser.id)

      if (updateError) {
        console.error('‚ùå Erreur lors de la mise √† jour du r√¥le:', updateError)
      } else {
        console.log('‚úÖ Utilisateur promu admin avec succ√®s!')
        console.log(`   ${firstUser.email} est maintenant administrateur`)
      }
    }

    console.log('\nüìã R√©sum√© des r√¥les:')
    const roleCount = {}
    users.forEach(user => {
      const role = user.role || 'non d√©fini'
      roleCount[role] = (roleCount[role] || 0) + 1
    })
    
    Object.entries(roleCount).forEach(([role, count]) => {
      console.log(`   ${role}: ${count} utilisateur(s)`)
    })

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
  }
}

checkAndFixAdminRole()